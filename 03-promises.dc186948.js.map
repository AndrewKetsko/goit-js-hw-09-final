{"mappings":"oeAAA,IAAAA,EAAAC,EAAA,SAEA,MAAMC,EAASC,SAASC,cAAc,QAChCC,EAAWF,SAASC,cAAc,UAoCxC,SAASE,EAAcC,EAAUC,GACjC,MAAMC,EAAgBC,KAAKC,SAAW,GACpC,OAAO,IAAIC,SAAQ,CAACC,EAASC,KAC7BC,YAAW,KACPN,EACFI,EAAQ,C,SAAEN,E,MAAUC,IAEpBM,EAAO,C,SAAEP,E,MAAUC,GAAQ,GAE1BA,EAAM,G,CA3CXN,EAAOc,iBAAiB,UAExB,SAAkBC,GAChBA,EAAEC,iBACFb,EAASc,UAAUC,IAAI,WACvB,MAAQC,UAAYb,MAAAc,EAAKC,KAAEA,EAAIC,OAAEA,IAAaP,EAAEQ,cAMhD,IAAIC,GAAaJ,EAAMK,MACvB,MAAMC,EAAa,GAEnB,IAAKC,EAAI,EAAGA,EAAIL,EAAOG,MAAOE,GAAK,EAAG,CAEpCH,GAAaJ,EAAMK,MAAQJ,EAAKI,MAAQE,EAExC,IAAIC,EAAqBxB,EAAcuB,EAAI,EAAGH,GAC3CK,MAAK,EAACxB,SAAEA,EAAQC,MAAEA,MACjBR,EAAAgC,OAAOC,QAAQ,uBAAqB1B,QAAiBC,OAAW,IAEjE0B,OAAM,EAAC3B,SAAEA,EAAQC,MAAEA,MAClBR,EAAAgC,OAAOG,QAAQ,sBAAoB5B,QAAeC,OAAW,IAEjEoB,EAAWQ,KAAKN,E,CAGlBlB,QAAQyB,IAAIT,GACTU,SAAQ,IAAMvB,YAAW,KACxBV,EAASc,UAAUoB,OAAO,UAAU,GAAE,M","sources":["src/js/03-promises.js"],"sourcesContent":["import { Notify } from 'notiflix/build/notiflix-notify-aio';\n\nconst formEl = document.querySelector('form');\nconst buttonEl = document.querySelector('button');\n\nformEl.addEventListener('submit', submitFn);\n\nfunction submitFn(e) {\n  e.preventDefault();\n  buttonEl.classList.add('disable')\n  const { elements: { delay, step, amount } } = e.currentTarget;\n  \n  // console.log(+delay.value);\n  // console.log(+step.value);\n  // console.log(+amount.value);\n\n  let fullDelay = +delay.value;\n  const promiseArr = [];\n  \n  for (i = 0; i < amount.value; i += 1) {\n\n    fullDelay = +delay.value + step.value * i;\n    \n    let currentPromiseLink = createPromise(i + 1, fullDelay)\n      .then(({ position, delay }) => {\n        Notify.success(`✅ Fulfilled promise ${position} in ${delay} ms`);\n      })\n      .catch(({ position, delay }) => {\n        Notify.failure(`❌ Rejected promise ${position} in ${delay} ms`);\n      });\n    promiseArr.push(currentPromiseLink);\n  }\n\n  Promise.all(promiseArr)\n    .finally(() => setTimeout(() => {\n      buttonEl.classList.remove('disable')},1000))\n};\n\n\nfunction createPromise(position, delay) {\nconst shouldResolve = Math.random() > 0.3;\n  return new Promise((resolve, reject) => {\n  setTimeout(() => {\n  if (shouldResolve) {\n    resolve({ position, delay });\n  } else {\n    reject({ position, delay });\n  }\n  }, delay);\n   });\n };\n\n"],"names":["$iQIUW","parcelRequire","$47d4ff9957288465$var$formEl","document","querySelector","$47d4ff9957288465$var$buttonEl","$47d4ff9957288465$var$createPromise","position","delay","shouldResolve","Math","random","Promise","resolve","reject","setTimeout","addEventListener","e","preventDefault","classList","add","elements","delay1","step","amount","currentTarget","fullDelay","value","promiseArr","i","currentPromiseLink","then","Notify","success","catch","failure","push","all","finally","remove"],"version":3,"file":"03-promises.dc186948.js.map"}